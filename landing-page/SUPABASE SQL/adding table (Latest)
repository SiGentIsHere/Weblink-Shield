-- =========================================
-- Schema created from your draw.io ERD
-- =========================================

-- =========================
-- Reference / lookup tables
-- =========================

CREATE TABLE IF NOT EXISTS "Role" (
  role_id         BIGSERIAL PRIMARY KEY,
  name            TEXT NOT NULL UNIQUE -- Free / Premium / Admin
);

CREATE TABLE IF NOT EXISTS "Plan" (
  plan_id         BIGSERIAL PRIMARY KEY,
  name            TEXT NOT NULL UNIQUE,  -- Free / Premium
  description     TEXT
);

CREATE TABLE IF NOT EXISTS "PlanPolicy" (
  policy_id                 BIGSERIAL PRIMARY KEY,
  plan_id                   BIGINT NOT NULL REFERENCES "Plan"(plan_id) ON DELETE CASCADE,
  daily_scan_limit          INTEGER,
  export_allowed            BOOLEAN,
  detailed_report_allowed   BOOLEAN
);

-- =========
-- Core data
-- =========

CREATE TABLE IF NOT EXISTS "User" (
  user_id         BIGSERIAL PRIMARY KEY,
  role_id         BIGINT REFERENCES "Role"(role_id) ON DELETE SET NULL,
  email           TEXT UNIQUE,
  username        TEXT UNIQUE,
  password_hash   TEXT,
  status          TEXT NOT NULL DEFAULT 'active',
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT user_status_chk CHECK (status IN ('active','suspended'))
);

CREATE TABLE IF NOT EXISTS "History" (
  history_id      BIGSERIAL PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,
  saved_at        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "Review" (
  review_id       BIGSERIAL PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,
  rating          INTEGER,           -- no range specified in the diagram
  comment         TEXT,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "Subscription" (
  subscription_id BIGSERIAL PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,
  start_date      DATE,
  end_date        DATE,
  status          TEXT               -- states not specified; kept open
);

CREATE TABLE IF NOT EXISTS "UsageCounter" (
  usage_id        BIGSERIAL PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,
  period_start    DATE,
  period_end      DATE,
  scans_used      INTEGER
);

-- =============
-- Scan workflow
-- =============

CREATE TABLE IF NOT EXISTS "Scan" (
  scan_id         BIGSERIAL PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,
  url_scanned     TEXT NOT NULL,
  submitted_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  analyzed_at     TIMESTAMPTZ,
  status          TEXT
);

CREATE TABLE IF NOT EXISTS "ThreatSummary" (
  summary_id      BIGSERIAL PRIMARY KEY,
  scan_id         BIGINT NOT NULL REFERENCES "Scan"(scan_id) ON DELETE CASCADE,
  category        TEXT,
  status          TEXT
);

-- The diagram shows "Detailed Report" twice with two sets of fields under the same heading.
-- I have merged them into a single table "Detailed Report" (DetailedReport) with all listed fields.
CREATE TABLE IF NOT EXISTS "Detailed Report" (
  detail_id       BIGSERIAL PRIMARY KEY,
  scan_id         BIGINT NOT NULL REFERENCES "Scan"(scan_id) ON DELETE CASCADE,
  -- Set A
  type            TEXT,
  result          TEXT,
  "extra_info"    JSONB,
  recommendation  TEXT,
  -- Set B
  overall_score   NUMERIC,
  risk_level      TEXT,
  target_user     BOOLEAN,
  admin           BOOLEAN
);

-- ===========
-- Admin / log
-- ===========

CREATE TABLE IF NOT EXISTS "AdminAction" (
  action_id       BIGSERIAL PRIMARY KEY,
  admin_id        BIGINT NOT NULL REFERENCES "User"(user_id) ON DELETE CASCADE,   -- FK to User.user_id
  target_user_id  BIGINT REFERENCES "User"(user_id) ON DELETE SET NULL,           -- FK to User.user_id
  action_type     TEXT,
  reason          TEXT,
  "timestamp"     TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "AuditLog" (
  log_id          BIGSERIAL PRIMARY KEY,
  actor_user_id   BIGINT REFERENCES "User"(user_id) ON DELETE SET NULL,  -- FK to User.user_id
  action          TEXT,
  entity_type     TEXT,
  entity_id       BIGINT,
  metadata        JSONB,
  "timestamp"     TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ============================
-- Helpful indexes (non-unique)
-- ============================
CREATE INDEX IF NOT EXISTS idx_user_role_id              ON "User"(role_id);
CREATE INDEX IF NOT EXISTS idx_history_user_id           ON "History"(user_id);
CREATE INDEX IF NOT EXISTS idx_review_user_id            ON "Review"(user_id);
CREATE INDEX IF NOT EXISTS idx_subscription_user_id      ON "Subscription"(user_id);
CREATE INDEX IF NOT EXISTS idx_usagecounter_user_id      ON "UsageCounter"(user_id);
CREATE INDEX IF NOT EXISTS idx_scan_user_id              ON "Scan"(user_id);
CREATE INDEX IF NOT EXISTS idx_threatsummary_scan_id     ON "ThreatSummary"(scan_id);
CREATE INDEX IF NOT EXISTS idx_detailedreport_scan_id    ON "Detailed Report"(scan_id);
CREATE INDEX IF NOT EXISTS idx_adminaction_admin_id      ON "AdminAction"(admin_id);
CREATE INDEX IF NOT EXISTS idx_adminaction_target_user   ON "AdminAction"(target_user_id);
CREATE INDEX IF NOT EXISTS idx_auditlog_actor_user_id    ON "AuditLog"(actor_user_id);
